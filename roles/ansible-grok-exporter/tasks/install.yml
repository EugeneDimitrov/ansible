- name: create grok_exporter system group
  group:
    name: "{{ grok_exporter_group }}"
    system: true
    state: present

- name: create grok_exporter system user
  user:
    name: "{{ grok_exporter_user }}"
    system: true
    shell: "/usr/sbin/nologin"
    group: "{{ grok_exporter_group }}"
    groups: "{{ grok_exporter_additional_groups }}"
    createhome: false
    append: yes

- name: download grok exporter binary to local folder
  become: false
  unarchive:
    src: "https://github.com/fstab/grok_exporter/releases/download/v{{ grok_exporter_version }}/grok_exporter-{{ grok_exporter_version }}.linux-{{ go_arch_map[ansible_architecture] | default(ansible_architecture) }}.zip"
    dest: "/tmp"
    remote_src: true
    creates: "/tmp/grok_exporter-{{ grok_exporter_version }}.linux-{{ go_arch_map[ansible_architecture] | default(ansible_architecture) }}/grok_exporter"
  register: _download_binary
  until: _download_binary is succeeded
  retries: 5
  delay: 2
  delegate_to: localhost
  check_mode: false

- name: propagate grok exporter binary
  copy:
    src: "/tmp/grok_exporter-{{ grok_exporter_version }}.linux-{{ go_arch_map[ansible_architecture] | default(ansible_architecture) }}/grok_exporter"
    dest: "/usr/local/bin/grok_exporter"
    mode: 0750
    owner: "{{ grok_exporter_user }}"
    group: "{{ grok_exporter_group }}"
  notify:
    - restart grok exporter

- name: set permissions for executable file
  file:
    dest: "/usr/local/bin/grok_exporter"
    state: file
    owner: "{{ grok_exporter_user }}"
    group: "{{ grok_exporter_group }}"
    mode: 0750

- name: Create configuration directory
  file:
    path: "/etc/grok-exporter"
    state: directory
    owner: "{{ grok_exporter_user }}"
    group: "{{ grok_exporter_group }}"
    mode: 0750

- name: Create patterns directory
  file:
    path: "{{ grok_exporter_patterns_dir }}"
    state: directory
    owner: "{{ grok_exporter_user }}"
    group: "{{ grok_exporter_group }}"
    mode: 0750
    
- name: Allow incoming connection from Prometheus server
  iptables:
    chain: INPUT
    protocol: tcp
    source: "{{ item }}"
    destination: "{{ grok_exporter_web_listen_address }}"
    destination_port: "{{ grok_exporter_web_listen_port }}"
    jump: ACCEPT
  with_items: "{{ groups['prometheus']  | map('extract', hostvars, ['ansible_host']) | list }}"

- name: Drop all incoming connection
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{ grok_exporter_web_listen_port }}"
    jump: DROP    

